// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	Create(ctx context.Context, in *CreateCustomerReq, opts ...grpc.CallOption) (*Customer, error)
	GetActiveCustomers(ctx context.Context, in *GetActiveCustomersReq, opts ...grpc.CallOption) (*ActiveCustomers, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) Create(ctx context.Context, in *CreateCustomerReq, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/api.CustomerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetActiveCustomers(ctx context.Context, in *GetActiveCustomersReq, opts ...grpc.CallOption) (*ActiveCustomers, error) {
	out := new(ActiveCustomers)
	err := c.cc.Invoke(ctx, "/api.CustomerService/GetActiveCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	Create(context.Context, *CreateCustomerReq) (*Customer, error)
	GetActiveCustomers(context.Context, *GetActiveCustomersReq) (*ActiveCustomers, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) Create(context.Context, *CreateCustomerReq) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCustomerServiceServer) GetActiveCustomers(context.Context, *GetActiveCustomersReq) (*ActiveCustomers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveCustomers not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCustomerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CustomerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).Create(ctx, req.(*CreateCustomerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetActiveCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveCustomersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetActiveCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CustomerService/GetActiveCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetActiveCustomers(ctx, req.(*GetActiveCustomersReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CustomerService_Create_Handler,
		},
		{
			MethodName: "GetActiveCustomers",
			Handler:    _CustomerService_GetActiveCustomers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// WorkOrderServiceClient is the client API for WorkOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkOrderServiceClient interface {
	Create(ctx context.Context, in *CreateWorkOrderReq, opts ...grpc.CallOption) (*WorkOrder, error)
	Finish(ctx context.Context, in *WorkOrderReq, opts ...grpc.CallOption) (*WorkOrder, error)
	Cancel(ctx context.Context, in *WorkOrderReq, opts ...grpc.CallOption) (*WorkOrderMsg, error)
	GetWorkOrders(ctx context.Context, in *GetWorkOrdersReq, opts ...grpc.CallOption) (*GetWorkOrdersResp, error)
	GetWorkOrderByCustomerID(ctx context.Context, in *GetWorkOrderByCustomerIDReq, opts ...grpc.CallOption) (*GetWorkOrdersResp, error)
	GetWorkOrderByID(ctx context.Context, in *GetWorkOrderByIDReq, opts ...grpc.CallOption) (*WorkOrderWithCustomerResp, error)
}

type workOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkOrderServiceClient(cc grpc.ClientConnInterface) WorkOrderServiceClient {
	return &workOrderServiceClient{cc}
}

func (c *workOrderServiceClient) Create(ctx context.Context, in *CreateWorkOrderReq, opts ...grpc.CallOption) (*WorkOrder, error) {
	out := new(WorkOrder)
	err := c.cc.Invoke(ctx, "/api.WorkOrderService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrderServiceClient) Finish(ctx context.Context, in *WorkOrderReq, opts ...grpc.CallOption) (*WorkOrder, error) {
	out := new(WorkOrder)
	err := c.cc.Invoke(ctx, "/api.WorkOrderService/Finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrderServiceClient) Cancel(ctx context.Context, in *WorkOrderReq, opts ...grpc.CallOption) (*WorkOrderMsg, error) {
	out := new(WorkOrderMsg)
	err := c.cc.Invoke(ctx, "/api.WorkOrderService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrderServiceClient) GetWorkOrders(ctx context.Context, in *GetWorkOrdersReq, opts ...grpc.CallOption) (*GetWorkOrdersResp, error) {
	out := new(GetWorkOrdersResp)
	err := c.cc.Invoke(ctx, "/api.WorkOrderService/GetWorkOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrderServiceClient) GetWorkOrderByCustomerID(ctx context.Context, in *GetWorkOrderByCustomerIDReq, opts ...grpc.CallOption) (*GetWorkOrdersResp, error) {
	out := new(GetWorkOrdersResp)
	err := c.cc.Invoke(ctx, "/api.WorkOrderService/GetWorkOrderByCustomerID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workOrderServiceClient) GetWorkOrderByID(ctx context.Context, in *GetWorkOrderByIDReq, opts ...grpc.CallOption) (*WorkOrderWithCustomerResp, error) {
	out := new(WorkOrderWithCustomerResp)
	err := c.cc.Invoke(ctx, "/api.WorkOrderService/GetWorkOrderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkOrderServiceServer is the server API for WorkOrderService service.
// All implementations must embed UnimplementedWorkOrderServiceServer
// for forward compatibility
type WorkOrderServiceServer interface {
	Create(context.Context, *CreateWorkOrderReq) (*WorkOrder, error)
	Finish(context.Context, *WorkOrderReq) (*WorkOrder, error)
	Cancel(context.Context, *WorkOrderReq) (*WorkOrderMsg, error)
	GetWorkOrders(context.Context, *GetWorkOrdersReq) (*GetWorkOrdersResp, error)
	GetWorkOrderByCustomerID(context.Context, *GetWorkOrderByCustomerIDReq) (*GetWorkOrdersResp, error)
	GetWorkOrderByID(context.Context, *GetWorkOrderByIDReq) (*WorkOrderWithCustomerResp, error)
	mustEmbedUnimplementedWorkOrderServiceServer()
}

// UnimplementedWorkOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkOrderServiceServer struct {
}

func (UnimplementedWorkOrderServiceServer) Create(context.Context, *CreateWorkOrderReq) (*WorkOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWorkOrderServiceServer) Finish(context.Context, *WorkOrderReq) (*WorkOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finish not implemented")
}
func (UnimplementedWorkOrderServiceServer) Cancel(context.Context, *WorkOrderReq) (*WorkOrderMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedWorkOrderServiceServer) GetWorkOrders(context.Context, *GetWorkOrdersReq) (*GetWorkOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkOrders not implemented")
}
func (UnimplementedWorkOrderServiceServer) GetWorkOrderByCustomerID(context.Context, *GetWorkOrderByCustomerIDReq) (*GetWorkOrdersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkOrderByCustomerID not implemented")
}
func (UnimplementedWorkOrderServiceServer) GetWorkOrderByID(context.Context, *GetWorkOrderByIDReq) (*WorkOrderWithCustomerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkOrderByID not implemented")
}
func (UnimplementedWorkOrderServiceServer) mustEmbedUnimplementedWorkOrderServiceServer() {}

// UnsafeWorkOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkOrderServiceServer will
// result in compilation errors.
type UnsafeWorkOrderServiceServer interface {
	mustEmbedUnimplementedWorkOrderServiceServer()
}

func RegisterWorkOrderServiceServer(s grpc.ServiceRegistrar, srv WorkOrderServiceServer) {
	s.RegisterService(&WorkOrderService_ServiceDesc, srv)
}

func _WorkOrderService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkOrderService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).Create(ctx, req.(*CreateWorkOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkOrderService_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkOrderService/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).Finish(ctx, req.(*WorkOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkOrderService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkOrderService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).Cancel(ctx, req.(*WorkOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkOrderService_GetWorkOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkOrdersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).GetWorkOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkOrderService/GetWorkOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).GetWorkOrders(ctx, req.(*GetWorkOrdersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkOrderService_GetWorkOrderByCustomerID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkOrderByCustomerIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).GetWorkOrderByCustomerID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkOrderService/GetWorkOrderByCustomerID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).GetWorkOrderByCustomerID(ctx, req.(*GetWorkOrderByCustomerIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkOrderService_GetWorkOrderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkOrderByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkOrderServiceServer).GetWorkOrderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.WorkOrderService/GetWorkOrderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkOrderServiceServer).GetWorkOrderByID(ctx, req.(*GetWorkOrderByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkOrderService_ServiceDesc is the grpc.ServiceDesc for WorkOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.WorkOrderService",
	HandlerType: (*WorkOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WorkOrderService_Create_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _WorkOrderService_Finish_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _WorkOrderService_Cancel_Handler,
		},
		{
			MethodName: "GetWorkOrders",
			Handler:    _WorkOrderService_GetWorkOrders_Handler,
		},
		{
			MethodName: "GetWorkOrderByCustomerID",
			Handler:    _WorkOrderService_GetWorkOrderByCustomerID_Handler,
		},
		{
			MethodName: "GetWorkOrderByID",
			Handler:    _WorkOrderService_GetWorkOrderByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
